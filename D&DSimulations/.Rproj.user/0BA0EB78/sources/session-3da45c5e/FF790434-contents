library(shiny)

# Define UI
ui <- fluidPage(
  titlePanel("Slider Puzzle"),
  fluidRow(
    column(6, 
           lapply(1:3, function(row) {
             fluidRow(
               lapply(1:3, function(col) {
                 actionButton(inputId = paste0("tile_", row, "_", col), label = "", style = "width:80px; height:80px;")
               })
             )
           })
    )
  ),
  verbatimTextOutput("status")
)

# Define server logic
server <- function(input, output, session) {
  # Initial state of the puzzle
  tiles <- reactiveVal(matrix(c(1:8, NA), nrow = 3))
  
  # Render tiles
  observe({
    tile_state <- tiles()
    for (row in 1:3) {
      for (col in 1:3) {
        label <- ifelse(is.na(tile_state[row, col]), "", tile_state[row, col])
        updateActionButton(session, inputId = paste0("tile_", row, "_", col), label = label)
      }
    }
  })
  
  # Handle tile clicks
  lapply(1:3, function(row) {
    lapply(1:3, function(col) {
      observeEvent(input[[paste0("tile_", row, "_", col)]], {
        tile_state <- tiles()
        empty_pos <- which(is.na(tile_state), arr.ind = TRUE)
        if ((abs(row - empty_pos[1]) + abs(col - empty_pos[2])) == 1) {
          tile_state[empty_pos] <- tile_state[row, col]
          tile_state[row, col] <- NA
          tiles(tile_state)
        }
      })
    })
  })
  
  # Check if puzzle is solved
  output$status <- renderText({
    tile_state <- tiles()
    if (all(tile_state[1:8] == 1:8)) {
      "Puzzle solved! ðŸŽ‰"
    } else {
      "Keep going!"
    }
  })
}

# Run the application
shinyApp(ui = ui, server = server)
